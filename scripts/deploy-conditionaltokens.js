const hre = require("hardhat");
const fs = require("fs");
const path = require("path");

/**
 * ÈÉ®ÁΩ≤ ConditionalTokens ÂêàÁ∫¶
 * ËøôÊòØ‰∏Ä‰∏™ÂÖ®Â±ÄÂü∫Á°ÄËÆæÊñΩÂêàÁ∫¶ÔºåÊØè‰∏™ÈìæÂè™ÈúÄË¶ÅÈÉ®ÁΩ≤‰∏ÄÊ¨°
 */
async function main() {
  console.log("=".repeat(60));
  console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤ ConditionalTokens...");
  console.log(`üìç ÁΩëÁªú: ${hre.network.name}`);
  console.log("=".repeat(60));

  // Á°Æ‰øù deployments ÁõÆÂΩïÂ≠òÂú®
  const deploymentsDir = path.join(__dirname, "../deployments");
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
    console.log("‚úÖ ÂàõÂª∫ deployments ÁõÆÂΩï");
  }

  // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÈÉ®ÁΩ≤Ëøá
  const configPath = path.join(deploymentsDir, `${hre.network.name}.json`);
  if (fs.existsSync(configPath)) {
    const existingConfig = JSON.parse(fs.readFileSync(configPath, "utf8"));
    if (existingConfig.conditionalTokens) {
      console.log("\n‚ö†Ô∏è  Ë≠¶Âëä: ConditionalTokens Â∑≤Âú®Ê≠§ÁΩëÁªúÈÉ®ÁΩ≤");
      console.log(`Áé∞ÊúâÂú∞ÂùÄ: ${existingConfig.conditionalTokens}`);
      console.log("\nÁªßÁª≠ÈÉ®ÁΩ≤‰ºöË¶ÜÁõñÁé∞ÊúâÈÖçÁΩÆ„ÄÇ");
      
      // Âú®Áîü‰∫ßÁéØÂ¢ÉË∑≥ËøáÈÉ®ÁΩ≤
      if (hre.network.name === "mainnet" || hre.network.name === "polygon") {
        console.log("‚ùå ‰∏∫Èò≤Ê≠¢ËØØÊìç‰ΩúÔºåËØ∑ÊâãÂä®Âà†Èô§ÈÖçÁΩÆÊñá‰ª∂ÂêéÂÜçÈÉ®ÁΩ≤");
        process.exit(1);
      }
    }
  }

  console.log("\nüìù ËØªÂèñ ConditionalTokens ÂêàÁ∫¶...");
  
  // Ê≥®ÊÑèÔºöConditionalTokens ‰ΩøÁî® Solidity 0.5.1
  // ‰Ω†ÈúÄË¶ÅÁ°Æ‰øù hardhat ÈÖçÁΩÆÊîØÊåÅËøô‰∏™ÁâàÊú¨
  const ConditionalTokens = await hre.ethers.getContractFactory("ConditionalTokens");
  
  console.log("‚è≥ ÈÉ®ÁΩ≤ÂêàÁ∫¶‰∏≠...");
  const conditionalTokens = await ConditionalTokens.deploy();
  await conditionalTokens.deployed();
  
  console.log("\n‚úÖ ConditionalTokens ÈÉ®ÁΩ≤ÊàêÂäü!");
  console.log("üì¶ ÂêàÁ∫¶Âú∞ÂùÄ:", conditionalTokens.address);
  console.log("üîó Êü•ÁúãÂêàÁ∫¶:", `https://${getExplorer(hre.network.name)}/address/${conditionalTokens.address}`);

  // È™åËØÅÈÉ®ÁΩ≤
  console.log("\nüîç È™åËØÅÈÉ®ÁΩ≤...");
  const code = await hre.ethers.provider.getCode(conditionalTokens.address);
  if (code === "0x") {
    throw new Error("‚ùå ÂêàÁ∫¶‰ª£Á†Å‰∏∫Á©∫ÔºåÈÉ®ÁΩ≤Â§±Ë¥•");
  }
  console.log("‚úÖ ÂêàÁ∫¶‰ª£Á†ÅÈ™åËØÅÊàêÂäü");

  // ‰øùÂ≠òÈÖçÁΩÆ
  const config = {
    network: hre.network.name,
    chainId: (await hre.ethers.provider.getNetwork()).chainId,
    conditionalTokens: conditionalTokens.address,
    deployedBy: await hre.ethers.provider.getSigner().getAddress(),
    deployedAt: new Date().toISOString(),
    markets: []
  };
  
  fs.writeFileSync(
    configPath,
    JSON.stringify(config, null, 2)
  );
  
  console.log(`\nüíæ ÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞: ${configPath}`);

  console.log("\n" + "=".repeat(60));
  console.log("üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ");
  console.log("=".repeat(60));
  console.log("\nüìã ‰∏ã‰∏ÄÊ≠•Ôºö");
  console.log("1. ÈÉ®ÁΩ≤ Fixed192x64Math Â∫ì");
  console.log("2. ÈÉ®ÁΩ≤ LMSRMarketMakerFactory");
  console.log("3. ÂàõÂª∫‰Ω†ÁöÑÁ¨¨‰∏Ä‰∏™Â∏ÇÂú∫");
  console.log("\nËøêË°å: npx hardhat run scripts/deploy-math-lib.js --network " + hre.network.name);
  console.log("=".repeat(60));
}

function getExplorer(networkName) {
  const explorers = {
    mainnet: "etherscan.io",
    polygon: "polygonscan.com",
    sepolia: "sepolia.etherscan.io",
    goerli: "goerli.etherscan.io",
    mumbai: "mumbai.polygonscan.com",
    avalanche: "snowtrace.io",
  };
  return explorers[networkName] || "etherscan.io";
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:");
    console.error(error);
    process.exit(1);
  });

